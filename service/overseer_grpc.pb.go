// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OverseerClient is the client API for Overseer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OverseerClient interface {
	AuthenticateUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	DeleteUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ActivateUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	DeactivateUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SetUserPassword(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateUserApikey(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateUserSocialAccount(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type overseerClient struct {
	cc grpc.ClientConnInterface
}

func NewOverseerClient(cc grpc.ClientConnInterface) OverseerClient {
	return &overseerClient{cc}
}

func (c *overseerClient) AuthenticateUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/overseer.Overseer/AuthenticateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overseerClient) GetUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/overseer.Overseer/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overseerClient) CreateUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/overseer.Overseer/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overseerClient) DeleteUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/overseer.Overseer/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overseerClient) ActivateUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/overseer.Overseer/ActivateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overseerClient) DeactivateUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/overseer.Overseer/DeactivateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overseerClient) SetUserPassword(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/overseer.Overseer/SetUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overseerClient) CreateUserApikey(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/overseer.Overseer/CreateUserApikey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overseerClient) CreateUserSocialAccount(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/overseer.Overseer/CreateUserSocialAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OverseerServer is the server API for Overseer service.
// All implementations must embed UnimplementedOverseerServer
// for forward compatibility
type OverseerServer interface {
	AuthenticateUser(context.Context, *Request) (*Response, error)
	GetUser(context.Context, *Request) (*Response, error)
	CreateUser(context.Context, *Request) (*Response, error)
	DeleteUser(context.Context, *Request) (*Response, error)
	ActivateUser(context.Context, *Request) (*Response, error)
	DeactivateUser(context.Context, *Request) (*Response, error)
	SetUserPassword(context.Context, *Request) (*Response, error)
	CreateUserApikey(context.Context, *Request) (*Response, error)
	CreateUserSocialAccount(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedOverseerServer()
}

// UnimplementedOverseerServer must be embedded to have forward compatible implementations.
type UnimplementedOverseerServer struct {
}

func (UnimplementedOverseerServer) AuthenticateUser(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateUser not implemented")
}
func (UnimplementedOverseerServer) GetUser(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedOverseerServer) CreateUser(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedOverseerServer) DeleteUser(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedOverseerServer) ActivateUser(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateUser not implemented")
}
func (UnimplementedOverseerServer) DeactivateUser(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateUser not implemented")
}
func (UnimplementedOverseerServer) SetUserPassword(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPassword not implemented")
}
func (UnimplementedOverseerServer) CreateUserApikey(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserApikey not implemented")
}
func (UnimplementedOverseerServer) CreateUserSocialAccount(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserSocialAccount not implemented")
}
func (UnimplementedOverseerServer) mustEmbedUnimplementedOverseerServer() {}

// UnsafeOverseerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OverseerServer will
// result in compilation errors.
type UnsafeOverseerServer interface {
	mustEmbedUnimplementedOverseerServer()
}

func RegisterOverseerServer(s grpc.ServiceRegistrar, srv OverseerServer) {
	s.RegisterService(&Overseer_ServiceDesc, srv)
}

func _Overseer_AuthenticateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverseerServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overseer.Overseer/AuthenticateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverseerServer).AuthenticateUser(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overseer_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverseerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overseer.Overseer/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverseerServer).GetUser(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overseer_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverseerServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overseer.Overseer/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverseerServer).CreateUser(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overseer_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverseerServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overseer.Overseer/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverseerServer).DeleteUser(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overseer_ActivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverseerServer).ActivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overseer.Overseer/ActivateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverseerServer).ActivateUser(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overseer_DeactivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverseerServer).DeactivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overseer.Overseer/DeactivateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverseerServer).DeactivateUser(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overseer_SetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverseerServer).SetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overseer.Overseer/SetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverseerServer).SetUserPassword(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overseer_CreateUserApikey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverseerServer).CreateUserApikey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overseer.Overseer/CreateUserApikey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverseerServer).CreateUserApikey(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overseer_CreateUserSocialAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverseerServer).CreateUserSocialAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/overseer.Overseer/CreateUserSocialAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverseerServer).CreateUserSocialAccount(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Overseer_ServiceDesc is the grpc.ServiceDesc for Overseer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Overseer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "overseer.Overseer",
	HandlerType: (*OverseerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateUser",
			Handler:    _Overseer_AuthenticateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Overseer_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Overseer_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Overseer_DeleteUser_Handler,
		},
		{
			MethodName: "ActivateUser",
			Handler:    _Overseer_ActivateUser_Handler,
		},
		{
			MethodName: "DeactivateUser",
			Handler:    _Overseer_DeactivateUser_Handler,
		},
		{
			MethodName: "SetUserPassword",
			Handler:    _Overseer_SetUserPassword_Handler,
		},
		{
			MethodName: "CreateUserApikey",
			Handler:    _Overseer_CreateUserApikey_Handler,
		},
		{
			MethodName: "CreateUserSocialAccount",
			Handler:    _Overseer_CreateUserSocialAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "overseer.proto",
}
